<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poison</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tianshuang.me/"/>
  <updated>2017-09-13T09:20:03.000Z</updated>
  <id>https://tianshuang.me/</id>
  
  <author>
    <name>Poison</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一次线上 CPU 飙升问题的分析解决</title>
    <link href="https://tianshuang.me/2017/09/%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A-CPU-%E9%A3%99%E5%8D%87%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E8%A7%A3%E5%86%B3/index.html"/>
    <id>https://tianshuang.me/2017/09/一次线上-CPU-飙升问题的分析解决/index.html</id>
    <published>2017-09-11T14:45:12.000Z</published>
    <updated>2017-09-13T09:20:03.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>前几日，下了班在家时突然收到监控报警，线上一组业务机器 CPU 被打满至 100%，为了保持服务的稳定运行，临时采取了升级配置、加机器等粗暴的方法将当晚扛了过去。<br><a id="more"></a><br>半夜想了下可能的原因，由于可能因素太多，不能确定，第二天到公司后，在一台预发机器上把 <a href="https://tianshuang.me/2017/05/Java-Mission-Control/index.html">Java Mission Control</a> 所需的参数配置好，然后就等待下一次问题出现呗，果然，没几天，在晚高峰时问题又复现了，马上将线上的流量分了一小部分到提前配置好的预发机器上，没过一会，预发机器的 <a href="https://www.howtogeek.com/194642/understanding-the-load-average-on-linux-and-other-unix-like-systems/" target="_blank" rel="external">负载</a> 也满了。在 Java Mission Control 的 Thread 的面板里观察了一会，业务线程的 CPU 使用率根本不高，超过 10% 的都很少，但此时 CPU 又是被打满的，在不停查看 Java Mission Control 中提供的信息时，发现了 <a href="http://www.fasterj.com/articles/oraclecollectors1.shtml" target="_blank" rel="external">Full GC</a> 非常频繁，在应用启动了两个多小时内，Full GC 了 1500 多次，占用了 13 多分钟，并且次数和时间依然在不停增加中，一下让笔者想到了之前在相关书籍上提到的频繁 Full GC 的相关问题，没想到在这里让笔者给碰上了，如图：</p><p><img src="https://storage.tianshuang.me/2017/09/prepub%20Full%20GC.png" alt="prepub Full GC"></p><p>但是预发机器和线上机器配置是不一样的啊，预发是 Full GC 导致的 CPU 飙升不能代表线上机器也是这个原因啊，为了验证此问题，笔者在其中一台线上机器配置了 GC log 等参数，就等着线上问题再出现时能留下相关日志信息，GC log 相关知识可参考： <a href="https://dzone.com/articles/understanding-garbage-collection-log" target="_blank" rel="external">Understanding the Java Garbage Collection Log</a> 。是否感觉肉眼分析 GC log 很麻烦？好吧，早就有人做好了相关分析工具： <a href="http://gceasy.io/" target="_blank" rel="external">GC easy</a> 。</p><p>这里提供一份 GC log，是在一台线上 1Core 4G 的机器上采集的 (JVM 未调优)，也是到了晚高峰 CPU 就 100% 了，可以自行上传到 <a href="http://gceasy.io/" target="_blank" rel="external">GC easy</a> 分析看看，点此 <a href="https://storage.tianshuang.me/2017/09/gc.log" target="_blank" rel="external">下载</a>。</p><p>一图胜千言：<br><img src="https://storage.tianshuang.me/2017/09/Full%20GC.png" alt="Full GC"></p><p>为了检查是否有部分业务线程存在大幅使用 CPU 的情况，笔者也顺便准备了 <a href="https://blog.fastthread.io/2016/06/06/how-to-take-thread-dumps-7-options/" target="_blank" rel="external">生成线程转储</a> 相关命令，如：先用 <a href="http://docs.oracle.com/javase/7/docs/technotes/tools/share/jps.html" target="_blank" rel="external">jps</a> 找出 tomcat 的 pid，然后使用如下命令生成线程转储：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jstack -l &lt;pid&gt; &gt; /opt/threadDump.txt</div></pre></td></tr></table></figure><p></p><p>为了保证数据的准确性，在 CPU 被打满的时间段内笔者生成了五六份以备后面分析，同样，用肉眼观察总是比较艰难，此处可利用 <a href="http://fastthread.io/" target="_blank" rel="external">Java Thread Dump Analyzer</a> 进行分析。这一块在线上机器上的分析和笔者之前在预发机器上观察的现象一致，没有存在大量消耗 CPU 的问题线程。</p><p>到此为止，问题总算找到了，只要找到原因所在，解决总是比较简单的，之前由于这组业务量不大，就没有进行 JVM 调优，使用的默认的 JVM 相关参数，比如在 1Core 4G 的机器上，默认 <a href="https://stackoverflow.com/questions/4667483/how-is-the-default-java-heap-size-determined/4667635#4667635" target="_blank" rel="external">最大堆内存</a> 为物理的内存的四分之一，还有很多内存没有得到利用，后面的解决办法也不用写了，调整后观察了一周，到目前为止晚高峰时服务依然很稳定，负载也在预期的范围内，没有再出现 CPU 飙升的情况，问题得到解决。</p><p><a href="https://blog.gceasy.io/2016/11/22/eliminate-consecutive-full-gcs/" target="_blank" rel="external">ELIMINATE CONSECUTIVE FULL GCs</a><br><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="external">深入理解 Java 虚拟机（第2版）</a><br><a href="https://book.douban.com/subject/26740520/" target="_blank" rel="external">Java 性能权威指南</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几日，下了班在家时突然收到监控报警，线上一组业务机器 CPU 被打满至 100%，为了保持服务的稳定运行，临时采取了升级配置、加机器等粗暴的方法将当晚扛了过去。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://tianshuang.me/tags/Java/"/>
    
      <category term="JVM" scheme="https://tianshuang.me/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>学习</title>
    <link href="https://tianshuang.me/2017/07/%E5%AD%A6%E4%B9%A0/index.html"/>
    <id>https://tianshuang.me/2017/07/学习/index.html</id>
    <published>2017-07-01T16:03:21.000Z</published>
    <updated>2017-07-01T16:05:56.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://storage.tianshuang.me/2017/07/study.jpg" alt="study"></p>]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&lt;img src=&quot;https://storage.tianshuang.me/2017/07/study.jpg&quot; alt=&quot;study&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="tombkeeper" scheme="https://tianshuang.me/tags/tombkeeper/"/>
    
  </entry>
  
  <entry>
    <title>Java 为什么对常量的修改没有生效？</title>
    <link href="https://tianshuang.me/2017/05/Java-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AF%B9%E5%B8%B8%E9%87%8F%E7%9A%84%E4%BF%AE%E6%94%B9%E6%B2%A1%E6%9C%89%E7%94%9F%E6%95%88%EF%BC%9F/index.html"/>
    <id>https://tianshuang.me/2017/05/Java-为什么对常量的修改没有生效？/index.html</id>
    <published>2017-05-15T02:17:48.000Z</published>
    <updated>2017-05-16T07:14:31.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>写这篇文章的起因是前几天同事改了一个常量类中的提示，发布到测试环境后没有生效，正好看 <a href="https://book.douban.com/subject/5362860/" target="_blank" rel="external">《Java 解惑（谜题 93: 类的战争）》</a> 提到了这个问题，所以写篇文章记录一下。</p><p>以下均使用命令行进行演示，至于为什么没有使用 IDE 后面会提到。</p><p>先看一个简单的 Constants 类：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Poison on 15/05/2017.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String a = <span class="string">"before fixing"</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><a id="more"></a><p>再看下 Solution 类：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Poison on 15/05/2017.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(Constants.a);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>编译，运行 Solution 的主函数，毫无疑问结果如图：</p><p><img src="https://storage.tianshuang.me/2017/05/ConstantsBeforeFixing.png" alt="before fixing"></p><p>现在我们把 Constants 类修改为：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Poison on 15/05/2017.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String a = <span class="string">"after fixing"</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>重新编译 Constants 类，再运行 Solution 的主函数，输出结果如图：</p><p><img src="https://storage.tianshuang.me/2017/05/ConstantsAfterFixing.png" alt="after fixing"></p><p>为什么修改没有生效？是 Constants 类的问题，还是 Solution 类的问题？</p><p>我们先反编译 Constants 类看看：</p><p><img src="https://storage.tianshuang.me/2017/05/javapConstants.png" alt="javap Constants"></p><p>由上图可见，对 Constants 类的修改是生效的。</p><p>再看反编译的 Solution 类：</p><p><img src="https://storage.tianshuang.me/2017/05/javapSolution.png" alt="javap Solution"></p><p>看到这里，原因也就明确了，常量变量会被编译进那些引用它们的类中。这和笔者同事前几日遇到的情况一模一样，同事在本地开发时修改了常量类中的常量字段的值，本地是生效的，原因是因为本地开发使用了 IDE，而 IDE 将引用到常量类的类也重新编译了，所以能看到最新的值，而在发布到测试环境的过程中，打包机仅仅将常量类所属的模块进行了重新编译，未将引用常量的类的模块重新编译，所以当时看见的是更改前的值，同事将常量类的 class 文件反编译后看见的也是修改后的值，但是却忘了看引用该常量类的类，所以当时没有发现这个问题。</p><p><a href="https://book.douban.com/subject/5362860/" target="_blank" rel="external">Java 解惑</a><br><a href="https://book.douban.com/subject/26418340/" target="_blank" rel="external">Java 虚拟机规范（Java SE 8版）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写这篇文章的起因是前几天同事改了一个常量类中的提示，发布到测试环境后没有生效，正好看 &lt;a href=&quot;https://book.douban.com/subject/5362860/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Java 解惑（谜题 93: 类的战争）》&lt;/a&gt; 提到了这个问题，所以写篇文章记录一下。&lt;/p&gt;&lt;p&gt;以下均使用命令行进行演示，至于为什么没有使用 IDE 后面会提到。&lt;/p&gt;&lt;p&gt;先看一个简单的 Constants 类：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Created by Poison on 15/05/2017.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Constants&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String a = &lt;span class=&quot;string&quot;&gt;&quot;before fixing&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://tianshuang.me/tags/Java/"/>
    
      <category term="Constant" scheme="https://tianshuang.me/tags/Constant/"/>
    
  </entry>
  
  <entry>
    <title>Awesome Linux tools</title>
    <link href="https://tianshuang.me/2017/05/Awesome-Linux-tools/index.html"/>
    <id>https://tianshuang.me/2017/05/Awesome-Linux-tools/index.html</id>
    <published>2017-05-06T02:57:47.000Z</published>
    <updated>2017-09-13T07:38:44.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><ul><li><a href="https://github.com/nvbn/thefuck" target="_blank" rel="external">fuck</a></li></ul><a id="more"></a><h3 id="System"><a href="#System" class="headerlink" title="System"></a>System</h3><ul><li><a href="http://hisham.hm/htop/" target="_blank" rel="external">htop</a></li><li><a href="https://linux.die.net/man/1/mpstat" target="_blank" rel="external">mpstat</a></li><li><a href="https://www.linuxtechi.com/generate-cpu-memory-io-report-sar-command/" target="_blank" rel="external">Generate CPU, Memory and I/O report using SAR command</a></li></ul><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><ul><li><a href="https://linux.die.net/man/8/netstat" target="_blank" rel="external">netstat</a></li><li><a href="https://linux.die.net/man/1/ifstat" target="_blank" rel="external">ifstat</a></li><li><a href="https://github.com/raboof/nethogs" target="_blank" rel="external">nethogs</a></li><li><a href="https://www.wireshark.org/docs/man-pages/tshark.html" target="_blank" rel="external">tshark</a></li><li><a href="https://linux.die.net/man/8/tcpdump" target="_blank" rel="external">tcpdump</a></li><li><a href="https://nmap.org/" target="_blank" rel="external">nmap</a></li><li><a href="https://github.com/haad/proxychains" target="_blank" rel="external">proxychains</a></li><li><a href="https://github.com/rofl0r/proxychains-ng" target="_blank" rel="external">proxychains-ng</a></li></ul><h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><ul><li><a href="https://linux.die.net/man/1/iostat" target="_blank" rel="external">iostat</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Shell&quot;&gt;&lt;a href=&quot;#Shell&quot; class=&quot;headerlink&quot; title=&quot;Shell&quot;&gt;&lt;/a&gt;Shell&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/nvbn/thefuck&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fuck&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="awesome" scheme="https://tianshuang.me/tags/awesome/"/>
    
  </entry>
  
  <entry>
    <title>Java Mission Control</title>
    <link href="https://tianshuang.me/2017/05/Java-Mission-Control/index.html"/>
    <id>https://tianshuang.me/2017/05/Java-Mission-Control/index.html</id>
    <published>2017-05-02T08:56:29.000Z</published>
    <updated>2017-05-15T02:19:12.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Java Flight Recorder and Java Mission Control together create a complete tool chain to continuously collect low level and detailed runtime information enabling after-the-fact incident analysis. Java Flight Recorder is a profiling and event collection framework built into the Oracle JDK. It allows Java administrators and developers to gather detailed low level information about how the Java Virtual Machine (JVM) and the Java application are behaving. Java Mission Control is an advanced set of tools that enables efficient and detailed analysis of the extensive of data collected by Java Flight Recorder. The tool chain enables developers and administrators to collect and analyze data from Java applications running locally or deployed in production environments.</p><p><img src="https://storage.tianshuang.me/2017/05/Java%20Mission%20Control.png" alt="Java Mission Control"><br>题图为监测 <a href="https://github.com/tianshuang/pull-readhub.me" target="_blank" rel="external">pull-readhub.me</a> 的示例数据。<br><a id="more"></a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/qytuEgVmhsI" frameborder="0" allowfullscreen></iframe><p><a href="http://www.oracle.com/technetwork/java/javaseproducts/mission-control/java-mission-control-1998576.html" target="_blank" rel="external">Java Mission Control</a><br><a href="https://github.com/btraceio/btrace" target="_blank" rel="external">BTrace</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java Flight Recorder and Java Mission Control together create a complete tool chain to continuously collect low level and detailed runtime information enabling after-the-fact incident analysis. Java Flight Recorder is a profiling and event collection framework built into the Oracle JDK. It allows Java administrators and developers to gather detailed low level information about how the Java Virtual Machine (JVM) and the Java application are behaving. Java Mission Control is an advanced set of tools that enables efficient and detailed analysis of the extensive of data collected by Java Flight Recorder. The tool chain enables developers and administrators to collect and analyze data from Java applications running locally or deployed in production environments.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://storage.tianshuang.me/2017/05/Java%20Mission%20Control.png&quot; alt=&quot;Java Mission Control&quot;&gt;&lt;br&gt;题图为监测 &lt;a href=&quot;https://github.com/tianshuang/pull-readhub.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pull-readhub.me&lt;/a&gt; 的示例数据。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://tianshuang.me/tags/Java/"/>
    
      <category term="测量" scheme="https://tianshuang.me/tags/%E6%B5%8B%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Quiz Yourself</title>
    <link href="https://tianshuang.me/2017/04/Quiz-Yourself/index.html"/>
    <id>https://tianshuang.me/2017/04/Quiz-Yourself/index.html</id>
    <published>2017-04-25T08:34:06.000Z</published>
    <updated>2017-04-25T08:44:55.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://storage.tianshuang.me/2017/04/Quiz1.jpg" alt="One"><br><a id="more"></a><br><img src="https://storage.tianshuang.me/2017/04/Quiz2.jpg" alt="Two"><br><img src="https://storage.tianshuang.me/2017/04/Quiz3.jpg" alt="Three"><br><img src="https://storage.tianshuang.me/2017/04/Quiz4.jpg" alt="Four"></p><p><a href="https://storage.tianshuang.me/2017/04/Java%20Magazine%20MarchApril%202017.pdf" target="_blank" rel="external">Java Magazine MarchApril 2017</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://storage.tianshuang.me/2017/04/Quiz1.jpg&quot; alt=&quot;One&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://tianshuang.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 对象指针压缩</title>
    <link href="https://tianshuang.me/2017/04/Java-%E5%AF%B9%E8%B1%A1%E6%8C%87%E9%92%88%E5%8E%8B%E7%BC%A9/index.html"/>
    <id>https://tianshuang.me/2017/04/Java-对象指针压缩/index.html</id>
    <published>2017-04-23T11:32:00.000Z</published>
    <updated>2017-04-23T11:54:45.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>很久之前就看到过 Java 对象指针压缩这个技术，只是一直没具体想为什么要偏移 3 位，好吧，最近才知道原因是因为大多数 JVM 实现都是采用 8 位对齐，所以二进制位中的后三位都是 0。<br><a id="more"></a></p><blockquote><p>Let’s talk a bit about Ordinary Object Pointers (OOPs) and Compressed OOPs (Coops). OOPs are the handles/pointers the JVM uses as object references. When oops are only 32 bits long, they can reference only 4 GB of memory, which is why a 32-bit JVM is limited to a 4 GB heap size. (The same restriction applies at the operating system level, which is why any 32-bit process is limited to 4GB of address space.) When oops are 64 bits long, they can reference terabytes of memory.<br>What if there were 35-bit oops? Then the pointer could reference 32 GB of memory and still take up less space in the heap than 64-bit references. The problem is that there aren’t 35-bit registers in which to store such references. Instead, though, the JVM can assume that the last 3 bits of the reference are all 0. Now every reference can be stored in 32 bits in the heap. When the reference is stored into a 64-bit register, the JVM can shift it left by 3 bits (adding three zeros at the end). When the reference is saved from a register, the JVM can right-shift it by 3 bits, discarding the zeros at the end.<br>This allows JVM to use pointers that can reference 32 GB of memory while using only 32 bits in the heap. However it also means that the JVM cannot access any object at an address that isn’t divisible by 8, since any address from a compressed oop ends with three zeros. The first possible oop is 0x1, which when shifted becomes 0x8. The next oop is 0x2, which when shifted becomes 0x10 (16). Objects must therefore be located on an 8-byte boundary. As we know objects are already aligned on an 8-byte boundary in the JVM (in both the 32- and 64-bit versions); this is the optimal alignment for most processors. So nothing is lost by using compressed oops.<br>A program that uses a 31 GB heap and compressed oops will usually be faster than a program that uses a 33 GB heap. Although the 33 GB heap is larger, the extra space used by the pointers in that heap means that the larger heap will perform more frequent GC cycles and have worse performance.<br>Compressed oops are enabled using the -XX:+UseCompressedOops flag; in Java 7 and later versions, they are enabled by default whenever the maximum heap size is less than 32 GB.</p></blockquote><p><a href="http://arturmkrtchyan.com/java-object-header" target="_blank" rel="external">Java Object header</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久之前就看到过 Java 对象指针压缩这个技术，只是一直没具体想为什么要偏移 3 位，好吧，最近才知道原因是因为大多数 JVM 实现都是采用 8 位对齐，所以二进制位中的后三位都是 0。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://tianshuang.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 对象内存布局</title>
    <link href="https://tianshuang.me/2017/04/Java-%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/index.html"/>
    <id>https://tianshuang.me/2017/04/Java-对象内存布局/index.html</id>
    <published>2017-04-19T12:58:53.000Z</published>
    <updated>2017-04-26T06:39:54.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>我把示例代码放了一份在 Github 上，<a href="https://github.com/tianshuang/jol-samples" target="_blank" rel="external">jol-samples</a>，想看的同学可以 clone 下来把每个 example 跑一跑就能看到 JVM 对象在内存中布局的一些信息，包括对象头占多大、字节怎么对齐、字段在内存中的顺序不一定与声明的顺序一致、涉及到继承时字段是如何存放的、带 transient 修饰符的字段被特殊处理、Java8 新增的 @Contended 注解的作用、JVM 的平台相关性、对象头中的 mark word 及 class word、轻量锁、偏向锁、重量锁、Hashcode、GC 需要用到的对象引用图、哈希碰撞时转换为链表以及 Java8 中极端情况下转换为红黑树、观察 mark word 中的 age 字段的值在 GC 后的变化 等等，我没有一个一个写出来，因为 25 个例子太多了，设计到的知识点也比较多，需要一些前置知识才能理解。<br><a id="more"></a><br><a href="http://openjdk.java.net/projects/code-tools/jol/" target="_blank" rel="external">JOL</a> (Java Object Layout) is the tiny toolbox to analyze object layout schemes in JVMs. These tools are using Unsafe, JVMTI, and Serviceability Agent (SA) heavily to decoder the actual object layout, footprint, and references. This makes JOL much more accurate than other tools relying on heap dumps, specification assumptions, etc.</p><p>以下是在看到输出后可能会迷惑的地方：</p><ul><li>首先要明确输出是大端字节序还是小端字节序，将二进制转换为十进制与后面的数字比较下就能确定。</li><li>伪共享、缓存一致性以及 Java8 中的 @Contended 注解，可能需要参考 <a href="https://dzone.com/articles/false-sharing-cache-coherence-and-the-contended-an" target="_blank" rel="external">False Sharing, Cache Coherence, and the @Contended Annotation on the Java 8 VM</a> 及 <a href="https://book.douban.com/subject/24722612/" target="_blank" rel="external">深入理解Java虚拟机（第2版）</a>。</li><li>Java8 中 HashMap 的变化，可参考 <a href="https://tamasgyorfi.net/2016/05/01/java-8-hashmaps-keys-and-the-comparable-interface/" target="_blank" rel="external">Java 8 HashMaps, Keys and the Comparable interface</a>。</li><li>涉及到对象头的部分可能需要参考这篇文章，<a href="http://arturmkrtchyan.com/java-object-header" target="_blank" rel="external">Java Object header</a>，需要找到和你运行时 JVM 对应的平台相关的对象头来看，比如我在本地运行时是 64 位的 HotSpot JVM，就需要看最下面的基于 64 位的对象头。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我把示例代码放了一份在 Github 上，&lt;a href=&quot;https://github.com/tianshuang/jol-samples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jol-samples&lt;/a&gt;，想看的同学可以 clone 下来把每个 example 跑一跑就能看到 JVM 对象在内存中布局的一些信息，包括对象头占多大、字节怎么对齐、字段在内存中的顺序不一定与声明的顺序一致、涉及到继承时字段是如何存放的、带 transient 修饰符的字段被特殊处理、Java8 新增的 @Contended 注解的作用、JVM 的平台相关性、对象头中的 mark word 及 class word、轻量锁、偏向锁、重量锁、Hashcode、GC 需要用到的对象引用图、哈希碰撞时转换为链表以及 Java8 中极端情况下转换为红黑树、观察 mark word 中的 age 字段的值在 GC 后的变化 等等，我没有一个一个写出来，因为 25 个例子太多了，设计到的知识点也比较多，需要一些前置知识才能理解。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://tianshuang.me/tags/Java/"/>
    
      <category term="JVM" scheme="https://tianshuang.me/tags/JVM/"/>
    
      <category term="JOL" scheme="https://tianshuang.me/tags/JOL/"/>
    
  </entry>
  
  <entry>
    <title>Awesome article</title>
    <link href="https://tianshuang.me/2017/04/Awesome-article/index.html"/>
    <id>https://tianshuang.me/2017/04/Awesome-article/index.html</id>
    <published>2017-04-08T13:31:33.000Z</published>
    <updated>2017-09-28T06:27:02.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="CS"><a href="#CS" class="headerlink" title="CS"></a>CS</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2016/11/byte-order.html" target="_blank" rel="external">理解字节序</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/12/user_space_vs_kernel_space.html" target="_blank" rel="external">User space 与 Kernel space</a></li><li><a href="http://datawarehouse4u.info/OLTP-vs-OLAP.html" target="_blank" rel="external">OLTP vs. OLAP</a></li><li><a href="https://zh.wikipedia.org/zh-cn/%E5%88%86%E9%A0%81%E8%A1%A8" target="_blank" rel="external">分页表</a></li><li><a href="https://zh.wikipedia.org/zh-cn/%E8%BD%89%E8%AD%AF%E5%BE%8C%E5%82%99%E7%B7%A9%E8%A1%9D%E5%8D%80" target="_blank" rel="external">页表缓存</a></li><li><a href="https://stackoverflow.com/questions/21617500/understanding-load-average-vs-cpu-usage" target="_blank" rel="external">Understanding load average vs cpu usage</a></li><li><p><a href="https://storage.tianshuang.me/2017/09/Writing%20a%20Simple%20Operating%20System.pdf" target="_blank" rel="external">Writing a Simple Operating System - from Scratch</a></p><a id="more"></a><h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzA3MDExNzcyNA==&amp;mid=2650392086&amp;idx=1&amp;sn=6a2ecfe2548f121a4726d03bf23f4478&amp;scene=0#wechat_redirect" target="_blank" rel="external">小而巧的数字压缩算法：zigzag</a></p></li><li><a href="http://mp.weixin.qq.com/s/Qcb9kOPQs0aQSIeAqmNpOQ" target="_blank" rel="external">多动态图详细讲解二叉搜索树</a></li></ul><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><ul><li><a href="https://www.zhihu.com/question/26960537" target="_blank" rel="external">智能DNS解析？</a></li></ul><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ul><li><a href="https://www.zhihu.com/question/34074946" target="_blank" rel="external">HTTP/2.0 相比 1.0 有哪些重大改进？</a></li><li><a href="https://en.wikipedia.org/wiki/HTTP_persistent_connection" target="_blank" rel="external">HTTP persistent connection</a></li><li><a href="https://en.wikipedia.org/wiki/Maximum_segment_lifetime" target="_blank" rel="external">Maximum segment lifetime</a></li><li><a href="https://www.mnot.net/talks/h2fe/" target="_blank" rel="external">HTTP/2 for Front-End Developers</a></li><li><a href="https://en.wikipedia.org/wiki/Comet_%28programming%29" target="_blank" rel="external">Comet</a></li><li><a href="http://www.ibm.com/developerworks/cn/web/wa-lo-comet/" target="_blank" rel="external">Comet：基于 HTTP 长连接的服务器推技术</a></li><li><a href="https://stackoverflow.com/questions/28582935/does-http-2-make-websockets-obsolete" target="_blank" rel="external">Does HTTP/2 make websockets obsolete?</a></li><li><a href="https://www.ietf.org/rfc/rfc2616.txt" target="_blank" rel="external">Hypertext Transfer Protocol – HTTP/1.1</a></li><li><a href="https://tools.ietf.org/html/rfc7540" target="_blank" rel="external">Hypertext Transfer Protocol Version 2 (HTTP/2)</a></li></ul><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><ul><li><a href="http://www.tcpipguide.com/free/index.htm" target="_blank" rel="external">The TCP/IP Guide</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA3MDExNzcyNA==&amp;mid=2650392396&amp;idx=1&amp;sn=8499f6b5cc6b67cb345d01c71ceafcb5&amp;chksm=86ccd77fb1bb5e693cd24cac0a747621d2fef9c0095c2a16fba77920deb9f88ed6af3bab9243&amp;mpshare=1&amp;scene=23&amp;srcid=01102EMQq6lFMUZY05DsSXVk#rd" target="_blank" rel="external">TCP 三次握手和 Syn-Flood 攻击</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;mid=209679438&amp;idx=1&amp;sn=d68c1512ad23f6e164f69bd351a18c62&amp;scene=21#wechat_redirect" target="_blank" rel="external">一则经典技术面试题目的解读</a></li><li><a href="https://github.com/alex/what-happens-when" target="_blank" rel="external">What-happens-when</a></li><li><a href="https://github.com/skyline75489/what-happens-when-zh_CN" target="_blank" rel="external">What-happens-when (中文版)</a></li><li><a href="http://scale-out-blog.blogspot.jp/2011/01/virtual-ip-addresses-and-their.html" target="_blank" rel="external">Virtual IP Addresses and Their Discontents for Database Availability</a></li><li><a href="https://zh.wikipedia.org/zh-cn/WebSocket" target="_blank" rel="external">WebSocket</a></li><li><a href="https://www.zhihu.com/question/20215561" target="_blank" rel="external">WebSocket 是什么原理？为什么可以实现持久连接？</a></li><li><a href="https://supportcenter.checkpoint.com/supportcenter/portal?eventSubmit_doGoviewsolutiondetails=&amp;solutionid=sk39125" target="_blank" rel="external">What does the SACK-permitted option and SACK option used for in a TCP header?</a></li><li><a href="https://en.wikipedia.org/wiki/Maximum_segment_size" target="_blank" rel="external">Maximum segment size</a></li></ul><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul><li><a href="http://mp.weixin.qq.com/s?__biz=MzA3MDExNzcyNA==&amp;mid=2650392147&amp;idx=1&amp;sn=91ba6172edb887217eca35532c8a4af3&amp;scene=0#wechat_redirect" target="_blank" rel="external">一个简单代码的不简单实现</a></li><li><a href="http://www.programcreek.com/2013/09/the-substring-method-in-jdk-6-and-jdk-7/" target="_blank" rel="external">The substring() Method in JDK 6 and JDK 7</a></li><li><a href="https://tamasgyorfi.net/2016/05/01/java-8-hashmaps-keys-and-the-comparable-interface/" target="_blank" rel="external">Java 8 HashMaps, Keys and the Comparable interface</a></li><li><a href="http://www.journaldev.com/1024/java-thread-join-example" target="_blank" rel="external">Java Thread Join Example</a></li><li><a href="http://stackoverflow.com/questions/8106209/why-is-there-a-java-radix-limit" target="_blank" rel="external">Why is there a Java radix limit?</a></li><li><a href="http://blog.alexnesterov.com/post/spring-your-next-microframework/" target="_blank" rel="external">Spring: your next Java microframework</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/java-lo-concurrenthashmap/" target="_blank" rel="external">探索 ConcurrentHashMap 高并发性的实现机制</a></li><li><a href="https://storage.tianshuang.me/2017/03/PerformanceTuningApacheTomcat.pdf" target="_blank" rel="external">Apache Tomcat Tuning for Production</a></li><li><a href="http://ifeve.com/disruptor/" target="_blank" rel="external">并发框架 Disruptor 译文</a></li><li><a href="https://antoniogoncalves.org/2015/01/15/micro-benchmarking-with-jmh-measure-dont-guess/" target="_blank" rel="external">Micro Benchmarking with JMH: Measure, don’t guess!</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-concurrencybugpatterns/" target="_blank" rel="external">多核系统上的 Java 并发缺陷模式</a></li><li><a href="http://coolshell.cn/articles/11454.html" target="_blank" rel="external">从 LongAdder 看更高效的无锁实现</a></li><li><a href="http://stackoverflow.com/questions/29247896/why-linkedlist-implementation-in-java-has-node-nested-class-as-static" target="_blank" rel="external">Why LinkedList implementation in java has Node nested class as static?</a></li><li><a href="http://stackoverflow.com/questions/6018701/how-is-mvn-clean-install-different-from-mvn-install" target="_blank" rel="external">How is “mvn clean install” different from “mvn install”?</a></li><li><a href="http://blog.csdn.net/haoel/article/details/2224055" target="_blank" rel="external">Java NIO 类库 Selector 机制解析（上）</a></li><li><a href="http://blog.csdn.net/haoel/article/details/2224069" target="_blank" rel="external">Java NIO 类库 Selector 机制解析（下）</a></li><li><a href="https://nobugsproject.com/2017/05/28/11-mistakes-java-developers-make-when-using-exceptions/" target="_blank" rel="external">11 mistakes java developers make when using exceptions</a></li><li><a href="https://en.wikipedia.org/wiki/Final_%28Java%29" target="_blank" rel="external">final (Java)</a></li><li><a href="https://stackoverflow.com/questions/16699593/uninitialized-object-vs-object-initialized-to-null" target="_blank" rel="external">Uninitialized Object vs Object Initialized to NULL</a></li></ul><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><ul><li><a href="http://arturmkrtchyan.com/java-object-header" target="_blank" rel="external">Java Object Header</a></li><li><a href="http://arturmkrtchyan.com/jvm-biased-locking" target="_blank" rel="external">JVM Biased Locking</a></li><li><a href="http://calvin1978.blogcn.com/articles/javatuning.html" target="_blank" rel="external">Java 性能优化指南 1.8 版，及唯品会的实战</a></li><li><a href="https://storage.tianshuang.me/2017/04/Java%20Tuning%20Guide%20v1.8.pdf" target="_blank" rel="external">Java Tuning Guide v1.8.pdf</a></li><li><a href="http://stackoverflow.com/questions/26351243/allocations-in-new-tlab-vs-allocations-outside-tlab" target="_blank" rel="external">Allocations in new TLAB vs allocations outside TLAB</a></li><li><a href="http://stackoverflow.com/questions/24618467/size-of-huge-objects-directly-allocated-to-old-generation/24620205#24620205" target="_blank" rel="external">Size of Huge Objects directly allocated to Old Generation</a></li><li><a href="https://www.ibm.com/developerworks/java/library/j-jtp10185/" target="_blank" rel="external">Synchronization optimizations in Mustang</a></li><li><a href="https://blog.gceasy.io/2016/12/08/real-time-greater-than-user-and-sys-time/" target="_blank" rel="external">REAL TIME IS GREATER THAN USER AND SYS TIME</a></li><li><a href="https://engineering.linkedin.com/blog/2016/02/eliminating-large-jvm-gc-pauses-caused-by-background-io-traffic" target="_blank" rel="external">Eliminating Large JVM GC Pauses Caused by Background IO Traffic</a></li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li><a href="https://www.cyberciti.biz/tips/what-is-devshm-and-its-practical-usage.html" target="_blank" rel="external">What Is /dev/shm And Its Practical Usage</a></li><li><a href="https://en.wikipedia.org/wiki/Tmpfs" target="_blank" rel="external">tmpfs</a></li><li><a href="http://blog.engineyard.com/2012/linux-scalability" target="_blank" rel="external">Linux TCP/IP Tuning for Scalability</a></li></ul><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><ul><li><a href="http://blog.brucefeng.info/post/high-qps-service" target="_blank" rel="external">当服务 QPS 增高时我们做什么</a></li><li><a href="http://blog.brucefeng.info/post/distributed-locks" target="_blank" rel="external">分布式锁</a></li><li><a href="http://insights.thoughtworkers.org/security-issues-in-restful/" target="_blank" rel="external">RESTful 架构风格下的 4 大常见安全问题</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html" target="_blank" rel="external">为什么文件名要小写？</a></li><li><a href="http://mp.weixin.qq.com/s/_snozlQIcfROxuexpVTe9Q" target="_blank" rel="external">我回阿里的 29 个月</a></li><li><a href="https://www.zhihu.com/question/29270034" target="_blank" rel="external">短 URL 系统是怎么设计的？</a></li><li><a href="https://www.zhihu.com/question/59227720" target="_blank" rel="external">有哪些命令行的软件堪称神器？</a></li><li><a href="http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy" target="_blank" rel="external">编程的智慧</a></li><li><a href="https://docs.google.com/file/d/0B3q8z0KnC5z6Zjc4VzdfOVN3RzA/edit" target="_blank" rel="external">Whiskey, Weed, and Wukan on the World Wide Web: On Measuring Censors’ Resources and Motivations</a></li><li><a href="http://www.internetfreedom.org/files/WhitePaper/ChinaGreatFirewallRevealed.pdf" target="_blank" rel="external">The Great Firewall Revealed</a></li><li><a href="https://www.zhihu.com/question/23119444" target="_blank" rel="external">「去 IOE」是全球范围内的趋势，还是只在中国存在？</a></li><li><a href="https://www.zhihu.com/question/57545650" target="_blank" rel="external">为什么阿里巴巴Java开发手册里要求禁止使用存储过程？</a></li><li><a href="https://vim.rtorr.com/lang/zh_cn/" target="_blank" rel="external">Vim Cheat Sheet</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CS&quot;&gt;&lt;a href=&quot;#CS&quot; class=&quot;headerlink&quot; title=&quot;CS&quot;&gt;&lt;/a&gt;CS&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/11/byte-order.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理解字节序&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/12/user_space_vs_kernel_space.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;User space 与 Kernel space&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://datawarehouse4u.info/OLTP-vs-OLAP.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OLTP vs. OLAP&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/%E5%88%86%E9%A0%81%E8%A1%A8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;分页表&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/%E8%BD%89%E8%AD%AF%E5%BE%8C%E5%82%99%E7%B7%A9%E8%A1%9D%E5%8D%80&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;页表缓存&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/21617500/understanding-load-average-vs-cpu-usage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding load average vs cpu usage&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://storage.tianshuang.me/2017/09/Writing%20a%20Simple%20Operating%20System.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing a Simple Operating System - from Scratch&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="awesome" scheme="https://tianshuang.me/tags/awesome/"/>
    
  </entry>
  
  <entry>
    <title>《网络是怎样连接的》笔记</title>
    <link href="https://tianshuang.me/2017/04/%E3%80%8A%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84%E3%80%8B%E7%AC%94%E8%AE%B0/index.html"/>
    <id>https://tianshuang.me/2017/04/《网络是怎样连接的》笔记/index.html</id>
    <published>2017-04-07T14:58:10.000Z</published>
    <updated>2017-04-26T15:45:10.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="浏览器生成消息"><a href="#浏览器生成消息" class="headerlink" title="浏览器生成消息"></a>浏览器生成消息</h3><ul><li>URL: Uniform Resource Locator，统一资源定位符。</li><li>URL: <a href="http://www.lab.glasscom.com/dir/" target="_blank" rel="external">http://www.lab.glasscom.com/dir/</a>，我们可以这样理解，以 “/” 结尾代表 /dir/ 后面本来应该有的文件名被省略了。根据 URL 的规则，文件名可以像前面这样省略。我们会在服务器上事先设置好文件名省略时要访问的默认文件名。这个设置根据服务器不同而不同，大多数情况下是 index.html 或者 default.htm 之类的文件名。</li></ul><a id="more"></a><ul><li>URI: Uniform Resource Identifier，统一资源标识符。</li><li>关于 HTTP 的 HEAD 方法，在我们仅仅需要 HTTP 响应头信息的时候就可以使用，比如不下载音视频的前提下通过 HEAD 方法查看一下字节数。这里推荐一个小工具 <a href="https://www.getpostman.com/" target="_blank" rel="external">POSTMAN</a>。</li><li>一般当我们访问 Web 服务器获取网页数据时，使用的就是 GET 方法。PUT、DELETE 等方法现在常用于 RESTful API 的设计中，在手机 App 和后端服务器交互时就会经常用到。</li><li>关于 GET 请求 URL 的最大长度，不同浏览器和服务器有不同的限制，可参考 <a href="https://technomanor.wordpress.com/2012/04/03/maximum-url-size/" target="_blank" rel="external">Maximum URL Size in HTTP GET Request</a>。</li><li>关于 ETag 这个字段，可以用来提供上次响应与下次请求之间的关联信息。上次响应中，服务器会通过 ETag 向客户端发送一个唯一标识，在下次请求中客户端可以通过 If-Match、If-None-Match、If-Range 字段将这个标识告知服务器，这样服务器就知道该请求和上次的响应是相关的。这个字段的功能和 Cookie 是相同的，但 Cookie 是网景（Netscape）公司自行开发的规格，而 Etag 是将其进行标准化后的规格。</li><li>HTTP 状态码摘要信息如下：<ul><li>1xx 告知请求的处理进度和情况</li><li>2xx 成功</li><li>3xx 表示需要进一步操作</li><li>4xx 客户端错误</li><li>5xx 服务器错误</li></ul></li><li>关于 DNS，可以参考 <a href="https://tianshuang.me/2017/01/%E9%82%A3%E4%BA%9B%E4%BD%A0%E6%9C%AA%E6%9B%BE%E6%B3%A8%E6%84%8F%E7%9A%84DNS%E7%BB%86%E8%8A%82/index.html">那些你未曾注意的DNS细节</a>。</li></ul><h3 id="用电信号传输-TCP-IP-数据"><a href="#用电信号传输-TCP-IP-数据" class="headerlink" title="用电信号传输 TCP/IP 数据"></a>用电信号传输 TCP/IP 数据</h3><ul><li>最早的 TCP/IP 协议原型设计相当于现在的 TCP 和 IP 在一起的样子，后来才拆分为 TCP 和 IP 两个协议。</li><li>TCP 两端并没有像绳子一样的真实连接，只是两端都在维护着连接状态而已。</li><li>我们平时在 console 使用 netstat 命令看到的 <a href="https://en.wikipedia.org/wiki/0.0.0.0" target="_blank" rel="external">0.0.0.0</a> 表示本机上的所有 IP 地址。</li><li>IP 地址实际上并不是分配给计算机的，而是分配给网卡的，因此当计算机上存在多块网卡时，每一块网卡都会有自己的 IP 地址。在这里可以想到阿里云的 ECS 能看到公网的网络接口，而腾讯云的 CVM 只能看到内网的网络接口。是因为 CVM 实例不与公网直接通信，而通过 NAT 网关访问外网，应答请求。</li><li>MAC: Media Access Control 的缩写。以太网的每个帧前面都有报头和起始帧分界符（SFD），报头占前 7 字节，起始帧分界符占 1 字节，报头用于 “唤醒” 接收适配器，并且将它们的时钟和发送方的时钟同步。起始帧分界符的最后两个比特为 11，即警告适配器，“重要的内容” 就要来了。</li><li>发送和接收同时并行的方式叫作 “全双工”，相对地，某一时刻只能进行发送或接收其中一种操作的叫作 “半双工”。</li><li>根据以太网的规格，两台设备之间的网线不能超过 100 米，在这个距离内极少会发生错误。这是双绞线的情况，如果采用光纤可以更长，而且错误率不会上升。在使用集线器的半双工模式中，当发送信号时，接收线路不应该有信号进来，但情况不总是尽如人意，有很小的可能性出现多台设备同时进行发送操作的情况，一旦发生这种情况，两组信号就会发生叠加，无法彼此区分出来，这就是所谓的信号碰撞。这种情况下，继续发送信号是没有意义的，因此发送操作会终止。为了通知其他设备当前线路已发生碰撞，还会发送一段时间的阻塞信号，然后所有的发送操作会全部停止。等待一段时间后，网络中的设备会尝试重新发送信号。等待时间是根据 MAC 地址生成一个随机数计算出来的。当网络拥塞时，发生碰撞的可能性就会提高，重试发送的时候可能又会和另外一台设备的发送操作冲突，这时会将等待时间延长一倍，然后再次重试。以此类推，最多重试 10 次，如果还是不行就报告通信错误。上述都是半双工的情况，在全双工模式中不需要像半双工模式这样考虑这么多复杂的问题，即便接收线路中有信号进来，也可以直接发送信号。</li><li>在接收帧时，如果 FCS 校验没有问题，接下来就要看一下 MAC 头部中接收方 MAC 地址与网卡在初始化时分配给自己的 MAC 地址是否一致，以判断这个帧是不是发给自己的，如果不是自己的帧就直接丢弃。但这里也有特例，我们可以让网卡不检查帧的接收方地址，不管是不是自己的帧都统统接收下来，这种模式叫做 “混杂模式”（Promiscuous Mode）。好吧，笔者第一次在代码里看见 Promiscuous 时，随手到谷歌翻译一查，翻译过来是 “淫乱”，当时就凌乱了，<a href="https://github.com/d1sm/finalspeed/tree/fileshare" target="_blank" rel="external">finalspeed</a> 中就用到了混杂模式。不过笔者认为 finalspeed 的代码写得比较乱，看了一些就没再看了。</li></ul><h3 id="从网线到网络设备"><a href="#从网线到网络设备" class="headerlink" title="从网线到网络设备"></a>从网线到网络设备</h3><ul><li>交换机并不只是简单地让信号流过，而是先接收信号并将其还原为数字信息，然后再重新转换成信号并发送出去的过程。交换机是基于以太网规格工作的设备，而路由器是基于 IP 工作的。交换机时通过 MAC 头部中的接收方 MAC 地址来判断转发目标的，而路由器则是根据 IP 头部中的 IP 地址来判断的。交换机在地址表中只匹配完全一致的记录，而路由器则会忽略主机号部分，只匹配网络号部分。</li><li>交换机端口的 MAC 模块不具有 MAC 地址。</li><li>当交换机发现一个包要发回到原端口时，就会直接丢弃这个包。当在地址表中找不到指定的 MAC 地址时，交换机无法判断应该把包转发到哪个端口，只能将包转发到除了源端口之外的所有端口上，无论该设备连接在哪个端口上都能收到这个包。</li><li>在以太网中，当没有数据在传输时，网络中会填充一种被称为连接脉冲的脉冲信号。在没有数据信号时就填充连接脉冲，这使得网络中一直都有一定的信号流过，从而能够检测对方是否在正常工作，或者说网线有没有正常连接。以太网设备的网线接口周围有一个绿色的 LED 指示灯，它表示是否检测到正常的脉冲信号。如果绿灯亮，说明 PHY(MAU) 模块以及网线连接正常。</li><li>路由器的各个端口都具有 MAC 地址和 IP 地址。</li><li>路由器在进行匹配时首先寻找网络号比特数最长的一条记录，如果路由表中存在网络号长度相同的多条记录，这时，需要根据跃点计数的值来进行判断。跃点计数越小说明该路由越近，因此应选择跃点计数较小的记录。</li><li>路由器中子网掩码为 0.0.0.0 的记录表示 “默认路由”。</li><li>在路由器更新 TTL 和分片的过程中，IP 头部的内容发生了改变，因此必须重新计算校验和。</li><li>在内网中可用作私有地址的范围仅限以下这些：<ul><li>10.0.0.0 ~ 10.255.255.255</li><li>172.16.0.0 ~ 172.31.255.255</li><li>192.168.0.0 ~ 192.168.255.255</li></ul></li><li><a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2" target="_blank" rel="external">NAT</a>，上面讲腾讯云的 CVM 时提了下，细节可参考词条链接。关于 tcptwrecyle 的使用，可参考 <a href="http://tech.youzan.com/linux_nat/" target="_blank" rel="external">优化Linux NAT网关</a>。</li></ul><h3 id="通过接入网进入互联网内部"><a href="#通过接入网进入互联网内部" class="headerlink" title="通过接入网进入互联网内部"></a>通过接入网进入互联网内部</h3><ul><li>电信号和光信号传播的速度大体上相同，之所以电缆不如光纤通信速率高，是因为电信号在提升通信速率的同时，其衰减率也会提高，而光信号本来的衰减率就很低，提高通信速率也并不会提高衰减率。此外，光纤还不受电磁噪声的影响，因此光纤能够进行高速通信。</li><li>双绞线的极限距离时 100 米，但光纤的连接距离可以长达几公里。</li><li>ADSL: Asymmetric Digital Subscriber Line, 不对称数字用户线。它是一种利用架设在电线杆上的金属电话线来进行高速通信的技术，它的上行方向（用户到互联网）和下行方向（互联网到用户）的通信速率时不对称的。记得笔者家里起初安装网络时就是使用的 ADSL，并且速率只有 1Mbps，当时还不懂为什么下载速度最高只能达到 128 KB/s，后来才知道原因是 1 Byte 等于 8 bit 啊。</li><li>关于分离器：在信号从用户端发送出去时，电话和 ADSL 信号只是同时流到一条线路上而已，分离器实际上并没有做什么事。分离器的作用其实在相反的方向，也就是信号从电话线传入的时候。这时，分离器需要将电话和 ADSL 的信号进行分离。分离器将一定频率以上的信号过滤掉，也就是过滤掉了 ADSL 使用的高频信号，这样以来，只有电话信号才会传入电话机，但对于另一头的 ADSL Modem，则是传输原本的混合信号给它。ADSL Modem 内部已经具备将 ADSL 频率外的信号过滤掉的功能，因此不需要在分离器进行过滤。</li><li>光纤由一种双层结构的纤维状透明材质（玻璃和塑料）构成，ADSL 信号是由多个频段的信号组成的，比较复杂，但光信号却非常简单，亮表示 1，暗表示 0。数字信息并不能一下子变成光信号，而是先将数字信息转换成电信号，然后再将电信号转换成光信号。</li></ul><h3 id="Web-服务器程序解释请求消息并作出响应"><a href="#Web-服务器程序解释请求消息并作出响应" class="headerlink" title="Web 服务器程序解释请求消息并作出响应"></a>Web 服务器程序解释请求消息并作出响应</h3><ul><li>在 HTTP1.0 中，是服务器先发起断开操作。</li></ul><p>参考书目：<br><a href="https://book.douban.com/subject/26176870/" target="_blank" rel="external">《计算机网络 自顶向下方法》</a><br><a href="https://book.douban.com/subject/26825411/" target="_blank" rel="external">《TCP/IP详解 卷1 协议》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;浏览器生成消息&quot;&gt;&lt;a href=&quot;#浏览器生成消息&quot; class=&quot;headerlink&quot; title=&quot;浏览器生成消息&quot;&gt;&lt;/a&gt;浏览器生成消息&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;URL: Uniform Resource Locator，统一资源定位符。&lt;/li&gt;&lt;li&gt;URL: &lt;a href=&quot;http://www.lab.glasscom.com/dir/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.lab.glasscom.com/dir/&lt;/a&gt;，我们可以这样理解，以 “/” 结尾代表 /dir/ 后面本来应该有的文件名被省略了。根据 URL 的规则，文件名可以像前面这样省略。我们会在服务器上事先设置好文件名省略时要访问的默认文件名。这个设置根据服务器不同而不同，大多数情况下是 index.html 或者 default.htm 之类的文件名。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="网络" scheme="https://tianshuang.me/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="笔记" scheme="https://tianshuang.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>从一道面试题开始说起</title>
    <link href="https://tianshuang.me/2017/03/%E4%BB%8E%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BC%80%E5%A7%8B%E8%AF%B4%E8%B5%B7/index.html"/>
    <id>https://tianshuang.me/2017/03/从一道面试题开始说起/index.html</id>
    <published>2017-03-15T13:38:19.000Z</published>
    <updated>2017-04-26T15:47:37.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>其实这道题笔者在第二家的实习面试中被问到过，但是笔者当时并没有回答正确，所幸其他问题回答得还算不赖，没有因为这一个问题表现不佳而被挂掉。最近看《Wireshark 网络分析就这么简单》第一篇文章就是这道题。</p><p>让我们开始吧。</p><p>问题：两台服务器 A 和 B 的网络配置如下，B 的子网掩码本应该是 255.255.255.0，被不小心配成了 255.255.255.224。它们还能正常通信吗？</p><p>服务器A：<br><img src="https://storage.tianshuang.me/2017/03/A.jpeg" alt="服务器A"></p><p>服务器B：<br><img src="https://storage.tianshuang.me/2017/03/B.jpeg" alt="服务器B"><br><a id="more"></a></p><p>这一篇文章在林沛满的博客中有记录，参见 <a href="http://blog.sina.com.cn/s/blog_70398db501018qcc.html" target="_blank" rel="external">Wireshark入门：第一次亲密接触</a>。</p><p>如果你坚持看完了上面这篇林沛满先生的文章，那么回到这里。笔者在看完之后不太明白的是为什么在 B 看来 A 属于不同子网，而在 A 看来 B 属于同一子网，于是拿起纸和笔手动计算了一下。过程如下：</p><p>在服务器 B 看来，在往服务器 A 发送包之前，是仅仅知道服务器 A 的 IP 地址的，并不知道服务器 A 的子网掩码，所以服务器 B 使用自己的子网掩码与服务器 B 自身的 IP 地址相与得到服务器 B 的网络地址，然后继续使用服务器 B 的子网掩码与服务器 A 的 IP 地址相与得到服务器 A 的网络地址，根据 B 和 A 的网络地址是否相等来判断是否属于同一子网：<br>B 的子网掩码为 255.255.255.224，二进制格式如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11111111 11111111 11111111 11100000（B 的子网掩码）</div></pre></td></tr></table></figure><p></p><p>B 的 IP 地址为 192.168.26.3，二进制格式如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11000000 10101000 00011010 00000011（B 的 IP 地址）</div></pre></td></tr></table></figure><p></p><p>服务器 B 使用自己的子网掩码与服务器 B 自身的 IP 地址相与得到服务器 B 的网络地址为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11000000 10101000 00011010 00000000（B 的网络地址）</div></pre></td></tr></table></figure><p></p><p>A 的 IP 地址为 192.168.26.129，二进制格式如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11000000 10101000 00011010 10000001（A 的 IP 地址）</div></pre></td></tr></table></figure><p></p><p>使用服务器 B 的子网掩码与服务器 A 的 IP 地址相与得到服务器 A 的网络地址为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11000000 10101000 00011010 10000000（A 的网络地址）</div></pre></td></tr></table></figure><p></p><p>通过以上结果，我们可以发现，在服务器 B 看来，B 的网络地址和 A 的网络地址是不同的，这也是服务器 B 通过 ARP 广播查询默认网关 MAC 地址的原因。</p><p>在服务器 A 看来：<br>A 的子网掩码为 255.255.255.0，二进制格式如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11111111 11111111 11111111 00000000（A 的子网掩码）</div></pre></td></tr></table></figure><p></p><p>A 的 IP 地址为 192.168.26.129，二进制格式如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11000000 10101000 00011010 10000001（A 的 IP 地址）</div></pre></td></tr></table></figure><p></p><p>服务器 A 使用自己的子网掩码与服务器 A 自身的 IP 地址相与得到服务器 A 的网络地址为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11000000 10101000 00011010 00000000（A 的网络地址）</div></pre></td></tr></table></figure><p></p><p>B 的 IP 地址为 192.168.26.3，二进制格式如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11000000 10101000 00011010 00000011（B 的 IP 地址）</div></pre></td></tr></table></figure><p></p><p>使用服务器 A 的子网掩码与服务器 B 的 IP 地址相与得到服务器 B 的网络地址为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11000000 10101000 00011010 00000000（B 的网络地址）</div></pre></td></tr></table></figure><p></p><p>通过以上结果，我们可以发现，在服务器 A 看来，A 的网络地址和 B 的网络地址是相同的，这也是服务器 A 直接和服务器 B 进行通信的原因。</p><p>最后推荐下林沛满的这两本书：<a href="https://book.douban.com/subject/26268767/" target="_blank" rel="external">《Wireshark 网络分析就这么简单》</a>，<a href="https://book.douban.com/subject/26710788/" target="_blank" rel="external">《Wireshark 网络分析的艺术》</a>。可以说是是国内技术书籍中的上乘之作。这两本书让笔者对 TCP/UDP 有了更深入的理解，纸上得来终觉浅，绝知此事要躬行，只有自己亲自抓几个包看看才能真正理解相关细节。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实这道题笔者在第二家的实习面试中被问到过，但是笔者当时并没有回答正确，所幸其他问题回答得还算不赖，没有因为这一个问题表现不佳而被挂掉。最近看《Wireshark 网络分析就这么简单》第一篇文章就是这道题。&lt;/p&gt;&lt;p&gt;让我们开始吧。&lt;/p&gt;&lt;p&gt;问题：两台服务器 A 和 B 的网络配置如下，B 的子网掩码本应该是 255.255.255.0，被不小心配成了 255.255.255.224。它们还能正常通信吗？&lt;/p&gt;&lt;p&gt;服务器A：&lt;br&gt;&lt;img src=&quot;https://storage.tianshuang.me/2017/03/A.jpeg&quot; alt=&quot;服务器A&quot;&gt;&lt;/p&gt;&lt;p&gt;服务器B：&lt;br&gt;&lt;img src=&quot;https://storage.tianshuang.me/2017/03/B.jpeg&quot; alt=&quot;服务器B&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Wireshark" scheme="https://tianshuang.me/tags/Wireshark/"/>
    
      <category term="TCP" scheme="https://tianshuang.me/tags/TCP/"/>
    
      <category term="UDP" scheme="https://tianshuang.me/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>阿里巴巴Java开发手册 笔记</title>
    <link href="https://tianshuang.me/2017/02/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C-%E7%AC%94%E8%AE%B0/index.html"/>
    <id>https://tianshuang.me/2017/02/阿里巴巴Java开发手册-笔记/index.html</id>
    <published>2017-02-17T10:12:35.000Z</published>
    <updated>2017-04-26T15:48:39.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="编程规约"><a href="#编程规约" class="headerlink" title="编程规约"></a>编程规约</h3><ul><li>POJO 类中布尔类型的变量，都不要加 is ，否则部分框架解析会引起序列化错误。假设定义一个 boolean 的 isSuccess 属性，它的方法 Getter 被 IDE 生成为 isSuccess() ， RPC 等三方框架在反向解析的时候， “以为” 对应的属性名称是 success ，导致属性获取不到，进而抛出异常。这点也是笔者之前遇到过的，查了很久哪里的错最后发现是这个问题，不过经历一次后基本后面就能避免。</li><li>接口类中的方法和属性不要加任何修饰符号。包括在一些开源的代码里，笔者也经常看见在接口方法上声明 public 关键字的，这是冗余的，在 Java 规范中提到过。关于代码的规范及简洁性诸位可以参考 <a href="https://book.douban.com/subject/4262627/" target="_blank" rel="external">《重构 改善既有代码的设计》</a> 及 <a href="https://book.douban.com/subject/4199741/" target="_blank" rel="external">《代码整洁之道》</a> 。</li></ul><a id="more"></a><ul><li>方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。不过没有必要插入多行空格进行隔开。这样可读性会明显提高，笔者经常看到部分开发人员的代码在很长的代码块里完全没有一个空行，没有按逻辑进行换行，这种习惯是不太好的。</li><li>所有的覆写方法，必须加 @Override 注解。这样 IDE 会检查合法性，有错误的话会及时提示。</li><li>所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。比如 Integer 的 -128 至 127 之间被缓存的对象可以直接使用 == 判断，因为被缓存了，是同一对象，地址相等，而这个区间外的却不能使用 == 判断，这也是面试时的一个常考点。</li><li>关于基本数据类型与包装数据类型：所有的 POJO 类属性必须使用包装数据类型，以便映射数据库中的 NULL ，局部变量推荐使用基本数据类型。</li><li>关于 hashCode 和 equals 的处理，遵循如下规则：只要重写 equals ，就必须重写 hashCode ，具体原因可参考<a href="https://book.douban.com/subject/3360807/" target="_blank" rel="external">《Effective java 中文版（第2版）》</a>。</li><li>关于 ArrayList 里 subList 结果的注意事项，subList 只是 ArrayList 的一个视图，这部分大家可以参考 JDK 里的源码。</li><li>不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。</li><li>在 JDK7 版本以上，Comparator 要满足自反性，传递性，对称性，不然 Arrays.sort， Collections.sort 会报 IllegalArgumentException 异常。这个在《Effective java 中文版（第2版）》中也有说明，虽然笔者之前看过，但在刚实习时的一个用于省份排序的代码里使用 Comparator 时还是忘了处理值相等的情况，所以，还是要实战后才能加深记忆。</li><li>集合初始化时，尽量指定集合初始值大小。这在笔者实习面试时也被问到，这块的话主要考察 ArrayList 的原理，内部机制，诸位看看JDK里 ArrayList 的原理就明白了。</li><li>创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</li><li>高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。概括为一句话就是：尽量降低锁的粒度。</li><li>对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。关于并发这块可以参考 <a href="https://book.douban.com/subject/10484692/" target="_blank" rel="external">《Java并发编程实战》</a> ，个人认为这本在笔者看过Java并发的书籍里能算上乘之作，另外也可参考 <a href="https://book.douban.com/subject/26591326/" target="_blank" rel="external">《Java并发编程的艺术》</a> 。</li><li>通过双重检查锁 (double-checked locking) (在并发场景) 实现延迟初始化的优化问题隐患 (可参考 The “Double-Checked Locking is Broken” Declaration) ，推荐问题解决方案中较为简单一种 (适用于 JDK5 及以上版本) ，将目标属性声明为 volatile 型。这部分涉及到两个重点，一是双重检查锁，二是 volatile 的原理及 Java 的主内存及每个线程的内存之间的关系。 volatile 只能解决多线程时的内存可见性问题，无法解决线程安全问题。可参考 <a href="https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java" target="_blank" rel="external">Double checked locking</a> 及 <a href="https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom" target="_blank" rel="external">Initialization on demand holder idiom</a> 。</li><li>注释掉的代码尽量要配合说明，而不是简单的注释掉。如果永久不用，建议直接删除，因为 Git 等版本控制系统保存了历史代码。</li><li>好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免无用的注释。</li><li>善用 TODO 及 FIXME ， IDE 可以方便的进行扫描。</li><li>获取当前毫秒数使用 System.currentTimeMillis()， System.nanoTime() 产生的值仅用于比较，同一时刻不同虚拟机 System.nanoTime() 返回的值可能不一样并且相差很大，笔者的同事已经踩过一次坑，关于 nanoTime 诸位可以看一看 JavaDoc 。</li></ul><h3 id="异常日志"><a href="#异常日志" class="headerlink" title="异常日志"></a>异常日志</h3><ul><li>不要捕获 Java 类库中定义的继承自 RuntimeException 的运行时异常类，如： IndexOutOfBoundsException / NullPointerException ，这类异常由程序员预检查来规避，保证程序健壮性。说到这里，异常继承结构图也可以看下。</li><li>捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</li><li>避免出现重复的代码 (Don’t Repeat Yourself) ，即 DRY 原则。关于这部分可参考 <a href="https://book.douban.com/subject/5387402/" target="_blank" rel="external">《程序员修炼之道》</a> 。</li><li>谨慎地记录日志。生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。关于日志把 server 磁盘撑爆的问题，我司也出现过，后面加了相关监控来避免。</li></ul><h3 id="MySQL-规约"><a href="#MySQL-规约" class="headerlink" title="MySQL 规约"></a>MySQL 规约</h3><ul><li>表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint (1表示是，0表示否)，此规则同样适用于 odps 建表。任何字段如果为非负数，必须是 unsigned 。因为这样的话可用容量提升了一倍。</li><li>表名不使用复数名词。表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</li><li>禁用保留字，如 desc、range、match、delayed 等，禁止在代码里对 SQL 关键字进行单独处理。</li><li>唯一索引名为 uk_ 字段名，普通索引名则为 idx_ 字段名。这样能让开发人员一眼就知道相关索引。</li><li>如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</li><li>表必备三字段： id, gmt_create, gmt_modified 。其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1 。gmt_create, gmt_modified 的类型均为 date_time 类型。创建时间与修改时间需要记录笔者理解，不理解的为什么要用 gmt 开头，北京时间应该是 GMT + 8:00 啊。</li><li>字段允许适当冗余，以提高性能，但是必须考虑数据同步的情况。冗余字段应遵循：不是频繁修改的字段；不是 varchar 超长字段，更不能是 text 字段。比如我司的很多表都冗余了 user_name 这个字段。</li><li>单表行数超过 500 万行或者单表容量超过 2 GB ，才推荐进行分库分表。</li><li>业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。即使在应用层做了非常完善的校验和控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</li><li>页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。关于 MySQL 的知识，诸位可参考 <a href="https://book.douban.com/subject/23008813/" target="_blank" rel="external">《高性能MySQL》</a> 。</li><li>利用延迟关联或者子查询优化超多分页场景。 MySQL 并不是跳过 offset 行，而是取 offset + N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。</li><li>建组合索引的时候，区分度最高的在最左边。</li><li>不要使用 count(列名) 或 count(常量)来替代 count(*) ，count(*)就是 SQL92 定义 的标准统计行数的语法，跟数据库无关，跟 NULL 和 非NULL 无关。</li><li>不得使用外键与级联，一切外键概念必须在应用层解决。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</li><li>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</li><li>数据订正时，删除和修改记录时，要先 select ，避免出现误删除，确认无误才能执行更新语句。</li></ul><h3 id="工程规约"><a href="#工程规约" class="headerlink" title="工程规约"></a>工程规约</h3><ul><li>高并发服务器建议调小 TCP 协议的 time_wait 超时时间。</li><li>调大服务器所支持的最大文件句柄数 (File Descriptor，简写为fd) 。</li><li>给 JVM 设置 -XX:+HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场景时输出 dump 信息。</li></ul><h3 id="安全规约"><a href="#安全规约" class="headerlink" title="安全规约"></a>安全规约</h3><ul><li>隶属于用户个人的页面或者功能必须进行权限控制校验。</li><li>用户敏感数据禁止直接展示，必须对展示数据脱敏。</li><li>用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入， 禁止字符串拼接 SQL 访问数据库。</li><li>用户请求传入的任何参数必须做有效性验证。</li><li>表单、AJAX 提交必须执行 CSRF 安全过滤。</li><li>在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放限制， 如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。</li><li>关于安全这块可以阅读 <a href="https://book.douban.com/subject/10546925/" target="_blank" rel="external">《白帽子讲Web安全》</a> 。</li></ul><p><a href="https://storage.tianshuang.me/2017/02/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C.pdf" target="_blank" rel="external">阿里巴巴 Java 开发手册</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;编程规约&quot;&gt;&lt;a href=&quot;#编程规约&quot; class=&quot;headerlink&quot; title=&quot;编程规约&quot;&gt;&lt;/a&gt;编程规约&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;POJO 类中布尔类型的变量，都不要加 is ，否则部分框架解析会引起序列化错误。假设定义一个 boolean 的 isSuccess 属性，它的方法 Getter 被 IDE 生成为 isSuccess() ， RPC 等三方框架在反向解析的时候， “以为” 对应的属性名称是 success ，导致属性获取不到，进而抛出异常。这点也是笔者之前遇到过的，查了很久哪里的错最后发现是这个问题，不过经历一次后基本后面就能避免。&lt;/li&gt;&lt;li&gt;接口类中的方法和属性不要加任何修饰符号。包括在一些开源的代码里，笔者也经常看见在接口方法上声明 public 关键字的，这是冗余的，在 Java 规范中提到过。关于代码的规范及简洁性诸位可以参考 &lt;a href=&quot;https://book.douban.com/subject/4262627/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《重构 改善既有代码的设计》&lt;/a&gt; 及 &lt;a href=&quot;https://book.douban.com/subject/4199741/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《代码整洁之道》&lt;/a&gt; 。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="规范" scheme="https://tianshuang.me/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>迟来的2016年度总结</title>
    <link href="https://tianshuang.me/2017/02/%E8%BF%9F%E6%9D%A5%E7%9A%842016%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/index.html"/>
    <id>https://tianshuang.me/2017/02/迟来的2016年度总结/index.html</id>
    <published>2017-02-08T15:35:33.000Z</published>
    <updated>2017-08-05T03:12:46.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote class="blockquote-center">青春啊<br>总是在这样分裂的失落的煎熬的夜晚让人伤心<br>我多么想你<br>只能轻轻唱歌</blockquote><p>在这正月十二的夜晚，笔者挑灯夜战之后，写下这份迟来的 2016 年度总结。 16 年已经成为过去，这一年，经历了太多事，四月初出学校实习，长辈的离世，各项事务繁杂不清。 2016 ，注定是悲伤的一年。</p><a id="more"></a><p>开学早早来到学校，三月面了阿里的实习内推，当然，历史总是惊人的相似，挂了，不过，作为一个渣学历的本科生，被刷是很正常的，当然，这不是失败的借口。笔者的第二次面试就是笔者现在的公司，然后就实习呗，当然，这次的面试官之前也是阿里的，这面试和笔者阿里实习内推面问的知识点是差不多的，因为岗位都是 Java 服务器端工程师，还告诉笔者阿里现在校招集团要求学校评级是 A 以上，没过也很正常。然后笔者就开始了实习生涯，因为这边给的 Offer 虽然比不上知乎上的随手几十 w 的年薪，但相对来说，也不会算低，并且在成都（一个月工资可以买一平！！！），笔者17年要面临毕业，学校还有一些事务需要处理，所以暂时不方便离开成都，这也是笔者后面没有再去参加其他面试的原因之一。以上是笔者的实习求职过程，生活的艰辛在这种时候体现得淋漓尽致。</p><p>长辈的离世，让我恍如从梦中惊醒，一切都成了昨天，化为了回忆，不知不觉一晃二十余年，一直以为时间还有很多，想起送我的心形夜光石，不知散落到了何处，有的事只能长眠于记忆。</p><p>同事准备在成都买房，苦于迟迟没有下手，十月出了新政，错过等一年，希望他能在下一波上涨前买下。</p><p>吃饭，唱K，室友 Moses 追女生技术欠佳，屡次失手，室友 RH 就不一样了，成功率蛮高，当然，室友 HB 更是高人，只是不愿出招，还有三四个月就毕业了，四年转瞬即逝，即将各奔东西，不知还能相聚几次。</p><p>二十多岁的年纪，迷茫，熬。</p><p>晚安吧。</p><audio controls><br><source src="https://storage.tianshuang.me/2017/02/%E6%9D%8E%E5%BF%97%20-%20%E6%A2%B5%E9%AB%98%E5%85%88%E7%94%9F%202015%E4%BC%B4%E5%A5%8F%E7%89%88.mp3" type="audio/mpeg"><br>Your browser does not support the audio tag.<br></audio>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;青春啊&lt;br&gt;总是在这样分裂的失落的煎熬的夜晚让人伤心&lt;br&gt;我多么想你&lt;br&gt;只能轻轻唱歌&lt;/blockquote&gt;&lt;p&gt;在这正月十二的夜晚，笔者挑灯夜战之后，写下这份迟来的 2016 年度总结。 16 年已经成为过去，这一年，经历了太多事，四月初出学校实习，长辈的离世，各项事务繁杂不清。 2016 ，注定是悲伤的一年。&lt;/p&gt;
    
    </summary>
    
    
      <category term="年度总结" scheme="https://tianshuang.me/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>那些你未曾注意的DNS细节</title>
    <link href="https://tianshuang.me/2017/01/%E9%82%A3%E4%BA%9B%E4%BD%A0%E6%9C%AA%E6%9B%BE%E6%B3%A8%E6%84%8F%E7%9A%84DNS%E7%BB%86%E8%8A%82/index.html"/>
    <id>https://tianshuang.me/2017/01/那些你未曾注意的DNS细节/index.html</id>
    <published>2017-01-13T06:53:49.000Z</published>
    <updated>2017-04-07T16:53:26.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>DNS 消息是使用二进制数据编写的，查询报文和回答报文有着相同的格式，比如这位朋友写的 <a href="https://github.com/shadowsocks/shadowsocks/blob/master/shadowsocks/asyncdns.py" target="_blank" rel="external">asyncdns</a> 就表达得非常清楚。</p><p>域名是大小写不敏感的。域名中的每一个标识至多 63 字符长。</p><p>一个区域的管理者必须为该区域提供一个主名字服务器和至少一个辅名字服务器。主、辅名字服务器必须是独立和冗余的，以便当某个名字服务器发生故障时不会影响该区域的名字服务。</p><p>大家平时经常见到的 A 记录其实是 Address 的缩写，MX 记录是 Mail eXchange 的缩写。RR 就是 Resource Record 的缩写。LDNS 是 Local DNS 的缩写。</p><p>根域（Top-Level Domain, TLD） DNS 服务器在运营上使用多台服务器来对应一个 IP 地址，因此尽管 IP 地址只有 13 个，但其实服务器的数量是很多的。参见 <a href="https://www.iana.org/domains/root/servers" target="_blank" rel="external">Root Servers</a>。</p><p>从理论上讲，任何 DNS 查询既可以是迭代的也能是递归的。</p><p>DNS 均支持 UDP 和 TCP 访问，但主要使用 UDP。</p><p><a href="http://www.ruanyifeng.com/blog/2016/06/dns.html" target="_blank" rel="external">DNS 原理入门</a><br><a href="https://en.wikipedia.org/wiki/Domain_Name_System" target="_blank" rel="external">Domain Name System</a><br><a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank" rel="external">RFC 1035</a></p>]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;DNS 消息是使用二进制数据编写的，查询报文和回答报文有着相同的格式，比如这位朋友写的 &lt;a href=&quot;https://github.com/shadowsocks/sha
    
    </summary>
    
    
      <category term="DNS" scheme="https://tianshuang.me/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Sorting Rows</title>
    <link href="https://tianshuang.me/2016/12/MySQL-Sorting-Rows/index.html"/>
    <id>https://tianshuang.me/2016/12/MySQL-Sorting-Rows/index.html</id>
    <published>2016-12-15T02:50:01.000Z</published>
    <updated>2017-04-26T06:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>之前一直以为 MySQL 的「ORDER BY」关键字在多列排序时未显式声明排序方式的列会沿用最后显式声明排序方式的列，今天才发现自己弄错了，罪过罪过。在多列排序时，不同的列拥有不同的排序方式，如果未显式声明，则采用默认的升序排序方式。</p><p>You can sort on multiple columns, and you can sort different columns in different directions. For example, to sort by type of animal in ascending order, then by birth date within animal type in descending order (youngest animals first), use the following query:<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT name, species, birth FROM pet</div><div class="line">    -&gt; ORDER BY species, birth DESC;</div><div class="line">+<span class="comment">----------+---------+------------+</span></div><div class="line">| name     | species | birth      |</div><div class="line">+<span class="comment">----------+---------+------------+</span></div><div class="line">| Chirpy   | bird    | 1998-09-11 |</div><div class="line">| Whistler | bird    | 1997-12-09 |</div><div class="line">| Claws    | cat     | 1994-03-17 |</div><div class="line">| Fluffy   | cat     | 1993-02-04 |</div><div class="line">| Fang     | dog     | 1990-08-27 |</div><div class="line">| Bowser   | dog     | 1989-08-31 |</div><div class="line">| Buffy    | dog     | 1989-05-13 |</div><div class="line">| Puffball | hamster | 1999-03-30 |</div><div class="line">| Slim     | snake   | 1996-04-29 |</div><div class="line">+<span class="comment">----------+---------+------------+</span></div></pre></td></tr></table></figure><p></p><p>The DESC keyword applies only to the column name immediately preceding it (birth); it does not affect the species column sort order.</p><p><a href="http://dev.mysql.com/doc/refman/5.7/en/sorting-rows.html" target="_blank" rel="external">MySQL 5.7 Reference Manual 4.3.4.4 Sorting Rows</a></p>]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;之前一直以为 MySQL 的「ORDER BY」关键字在多列排序时未显式声明排序方式的列会沿用最后显式声明排序方式的列，今天才发现自己弄错了，罪过罪过。在多列排序时，不同的列
    
    </summary>
    
    
      <category term="MySQL" scheme="https://tianshuang.me/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL JOINS</title>
    <link href="https://tianshuang.me/2016/09/SQL-JOINS/index.html"/>
    <id>https://tianshuang.me/2016/09/SQL-JOINS/index.html</id>
    <published>2016-09-27T06:24:15.000Z</published>
    <updated>2017-04-16T14:01:09.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://storage.tianshuang.me/2016/09/sql_joins.jpg" alt="SQL JOINS"></p>]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&lt;img src=&quot;https://storage.tianshuang.me/2016/09/sql_joins.jpg&quot; alt=&quot;SQL JOINS&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://tianshuang.me/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>读写分离</title>
    <link href="https://tianshuang.me/2016/08/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/index.html"/>
    <id>https://tianshuang.me/2016/08/读写分离/index.html</id>
    <published>2016-08-17T02:38:42.000Z</published>
    <updated>2017-04-26T06:44:35.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>之前介绍了多数据源的接入，参见 <a href="https://tianshuang.me/2016/08/Multiple%20Datasource/index.html">Multiple Datasource</a> ，后来一个数据分析的项目（大部分都是读操作）需要用到读写分离，在分析时读取从库的数据，避免增加对线上数据库的压力，少部分写操作依然写主库，然后再被同步至从库，根据同事的建议，希望采用注解方式实现，从而在开发时只需加上特定的注解即可表明此 DAO 操作主库还是从库，原理依然与之前类似，以下是调整的部分：</p><a id="more"></a><blockquote><p>为了保护隐私，以下代码部分命名被修改</p></blockquote><ol><li><p>定义主从数据库的枚举，因为项目中大多数走从库，所以吧 SLAVE 写在了第一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Poison on 8/15/2016.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Database &#123;</div><div class="line">    SLAVE,</div><div class="line">    MASTER</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>定义切换数据源的注解，注解基础可参见 <a href="https://docs.oracle.com/javase/tutorial/java/annotations/index.html" target="_blank" rel="external">Lesson: Annotations</a> ，根据同事需要只定义了类级别的注解，保留到运行时，读者完全可以根据自身需要自由发挥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Poison on 8/16/2016.</span></div><div class="line"><span class="comment"> * This is a marker annotation.</span></div><div class="line"><span class="comment"> * Use this annotation on DAO interface level, represent that all methods in this interface will operate your specified database.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataSource &#123;</div><div class="line">    <span class="function">Database <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> Database.SLAVE</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>修改 AOP 相关代码，只有在 DAO 接口上应用了 @DataSource 注解，并且注解值为 Database.MASTER 时才走主库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Poison on 8/15/2016.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AroundDataSource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* me.tianshuang.dao..*.*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doBasicProfiling</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Object result;</div><div class="line">        <span class="keyword">if</span> (hasMasterAnnotation(pjp)) &#123;</div><div class="line">            DataSourceContextHolder.setDataSource(Database.MASTER);</div><div class="line">            result = pjp.proceed();</div><div class="line">            DataSourceContextHolder.restoreToSlaveDataSource();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            result = pjp.proceed();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasMasterAnnotation</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</div><div class="line">        Class&lt;?&gt; declaringClass = ((MethodSignature) pjp.getSignature()).getMethod().getDeclaringClass();</div><div class="line">        <span class="keyword">if</span> (declaringClass.isAnnotationPresent(DataSource.class)) &#123;</div><div class="line">            DataSource dataSource = declaringClass.getAnnotation(DataSource.class);</div><div class="line">            <span class="keyword">if</span> (dataSource.value() == Database.MASTER) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前介绍了多数据源的接入，参见 &lt;a href=&quot;https://tianshuang.me/2016/08/Multiple%20Datasource/index.html&quot;&gt;Multiple Datasource&lt;/a&gt; ，后来一个数据分析的项目（大部分都是读操作）需要用到读写分离，在分析时读取从库的数据，避免增加对线上数据库的压力，少部分写操作依然写主库，然后再被同步至从库，根据同事的建议，希望采用注解方式实现，从而在开发时只需加上特定的注解即可表明此 DAO 操作主库还是从库，原理依然与之前类似，以下是调整的部分：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://tianshuang.me/tags/Java/"/>
    
      <category term="OLAP" scheme="https://tianshuang.me/tags/OLAP/"/>
    
  </entry>
  
  <entry>
    <title>Multiple Datasource</title>
    <link href="https://tianshuang.me/2016/08/Multiple%20Datasource/index.html"/>
    <id>https://tianshuang.me/2016/08/Multiple Datasource/index.html</id>
    <published>2016-08-15T07:53:52.000Z</published>
    <updated>2017-04-26T15:51:05.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近项目中需要接入多个数据源，起初准备让 Mybatis 来进行数据源的动态选择，但查询 Mybatis 的相关文档后，未发现官方对多数据源的支持，并且笔者的项目中 Mybatis 的使用采用全注解的方式，如果实例化两个 SqlSessionFactory ，在全注解使用 Mybatis 的情况下，无法显式指定某个 Mapper 使用哪一个 sqlSessionFactory 。</p><p>继续查询相关资料，发现 Spring 自 2.0.1 开始就提供了对动态数据源的支持，参见 <a href="http://spring.io/blog/2007/01/23/dynamic-datasource-routing/" target="_blank" rel="external">Dynamic DataSource Routing</a> ，咳咳，由于文章历史悠久，追溯至2007年，所以在笔者的项目中笔者对其进行了改进，思路依然与原文基本一致，只不过把文中基于XML的相关配置改为了我们项目中的基于 Java Code 的配置。</p><a id="more"></a><blockquote><p>为了保护隐私，以下代码部分命名被修改</p></blockquote><ol><li><p>定义多个数据源的枚举，本例中仅包含两个数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Poison on 8/15/2016.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">enum</span> DataSource &#123;</div><div class="line">    FIRST,</div><div class="line">    SECOND</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>定义 DataSourceContextHolder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Poison on 8/15/2016.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataSourceContextHolder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;DataSource&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        contextHolder.set(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> contextHolder.get();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">restoreToFirstDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        contextHolder.set(DataSource.FIRST);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>定义 RoutingDataSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Poison on 8/15/2016.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoutingDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> DataSourceContextHolder.getDataSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Datasource 相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="keyword">public</span> javax.sql.<span class="function">DataSource <span class="title">dataSourceForFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    HikariConfig hikariConfig = <span class="keyword">new</span> HikariConfig();</div><div class="line"></div><div class="line">    hikariConfig.setDataSourceClassName(getProperty(<span class="string">"jdbc.dataSourceClassName"</span>));</div><div class="line">    hikariConfig.setUsername(getProperty(<span class="string">"jdbc.username"</span>));</div><div class="line">    hikariConfig.setPassword(getProperty(<span class="string">"jdbc.password"</span>));</div><div class="line">    hikariConfig.setMinimumIdle(Integer.parseInt(getProperty(<span class="string">"jdbc.minimumIdle"</span>)));</div><div class="line">    hikariConfig.setMaximumPoolSize(Integer.parseInt(getProperty(<span class="string">"jdbc.maximumPoolSize"</span>)));</div><div class="line">    hikariConfig.addDataSourceProperty(<span class="string">"serverName"</span>, getProperty(<span class="string">"jdbc.serverName"</span>));</div><div class="line">    hikariConfig.addDataSourceProperty(<span class="string">"port"</span>, getProperty(<span class="string">"jdbc.port"</span>));</div><div class="line">    hikariConfig.addDataSourceProperty(<span class="string">"databaseName"</span>, getProperty(<span class="string">"jdbc.databaseName"</span>));</div><div class="line"></div><div class="line">    optimizeHikariConfigForMysql(hikariConfig);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HikariDataSource(hikariConfig);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">optimizeHikariConfigForMysql</span><span class="params">(HikariConfig hikariConfig)</span> </span>&#123;</div><div class="line">    hikariConfig.addDataSourceProperty(<span class="string">"cachePrepStmts"</span>, <span class="keyword">true</span>);</div><div class="line">    hikariConfig.addDataSourceProperty(<span class="string">"prepStmtCacheSize"</span>, <span class="number">250</span>);</div><div class="line">    hikariConfig.addDataSourceProperty(<span class="string">"prepStmtCacheSqlLimit"</span>, <span class="number">2048</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="keyword">public</span> javax.sql.<span class="function">DataSource <span class="title">dataSourceForSecond</span><span class="params">()</span> </span>&#123;</div><div class="line">    HikariConfig hikariConfig = <span class="keyword">new</span> HikariConfig();</div><div class="line"></div><div class="line">    hikariConfig.setDataSourceClassName(env.getProperty(<span class="string">"jdbc.second.dataSourceClassName"</span>));</div><div class="line">    hikariConfig.setUsername(getProperty(<span class="string">"jdbc.second.username"</span>));</div><div class="line">    hikariConfig.setPassword(getProperty(<span class="string">"jdbc.second.password"</span>));</div><div class="line">    hikariConfig.setMinimumIdle(Integer.parseInt(env.getProperty(<span class="string">"jdbc.second.minimumIdle"</span>)));</div><div class="line">    hikariConfig.setMaximumPoolSize(Integer.parseInt(env.getProperty(<span class="string">"jdbc.second.maximumPoolSize"</span>)));</div><div class="line">    hikariConfig.addDataSourceProperty(<span class="string">"serverName"</span>, getProperty(<span class="string">"jdbc.second.serverName"</span>));</div><div class="line">    hikariConfig.addDataSourceProperty(<span class="string">"port"</span>, getProperty(<span class="string">"jdbc.second.port"</span>));</div><div class="line">    hikariConfig.addDataSourceProperty(<span class="string">"databaseName"</span>, getProperty(<span class="string">"jdbc.second.databaseName"</span>));</div><div class="line"></div><div class="line">    optimizeHikariConfigForMysql(hikariConfig);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HikariDataSource(hikariConfig);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="keyword">public</span> javax.sql.<span class="function">DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    RoutingDataSource routingDataSource = <span class="keyword">new</span> RoutingDataSource();</div><div class="line"></div><div class="line">    Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    targetDataSources.put(DataSource.FIRST, dataSourceForFirst());</div><div class="line">    targetDataSources.put(DataSource.SECOND, dataSourceForSecond());</div><div class="line"></div><div class="line">    routingDataSource.setTargetDataSources(targetDataSources);</div><div class="line">    routingDataSource.setDefaultTargetDataSource(dataSourceForFirst());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> routingDataSource;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    SqlSessionFactoryBean sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBean();</div><div class="line"></div><div class="line">    sessionFactory.setDataSource(dataSource());</div><div class="line">    sessionFactory.setTypeAliasesPackage(<span class="string">"me.tianshuang.domain"</span>);</div><div class="line">    sessionFactory.setTypeHandlers(<span class="keyword">new</span> TypeHandler[]&#123;<span class="keyword">new</span> LocalDateTimeTypeHandler()&#125;);</div><div class="line"></div><div class="line">    org.apache.ibatis.session.Configuration configuration = <span class="keyword">new</span> org.apache.ibatis.session.Configuration();</div><div class="line">    configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    sessionFactory.setConfiguration(configuration);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> sessionFactory.getObject();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>AOP 相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by Poison on 8/15/2016.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AroundDataSource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* me.tianshuang.dao.second..*.*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doBasicProfiling</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        DataSourceContextHolder.setDataSource(DataSource.SECOND);</div><div class="line">        Object result = pjp.proceed();</div><div class="line">        DataSourceContextHolder.restoreToFirstDataSource();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>在对数据源进行路由的控制这方面，采用了 AOP 的思想，在我们的项目中，因为第二个数据源用的频率很低，所以为需要操作第二个数据源的 Mapper 单独建立了一个包 (me.tianshuang.dao.second) ，在此包下的所有 Mapper 的方法在执行前将切换数据源为 SECOND ，执行完方法后又切回数据源 First 。</p><p>以上只是切换数据源的一种方案，本文的关键就在于 RoutingDataSource ，而在哪里切换数据源，读者完全可根据自身项目需要选择最适合的方案，该例只是适合笔者所在项目的一个例子。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中需要接入多个数据源，起初准备让 Mybatis 来进行数据源的动态选择，但查询 Mybatis 的相关文档后，未发现官方对多数据源的支持，并且笔者的项目中 Mybatis 的使用采用全注解的方式，如果实例化两个 SqlSessionFactory ，在全注解使用 Mybatis 的情况下，无法显式指定某个 Mapper 使用哪一个 sqlSessionFactory 。&lt;/p&gt;&lt;p&gt;继续查询相关资料，发现 Spring 自 2.0.1 开始就提供了对动态数据源的支持，参见 &lt;a href=&quot;http://spring.io/blog/2007/01/23/dynamic-datasource-routing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dynamic DataSource Routing&lt;/a&gt; ，咳咳，由于文章历史悠久，追溯至2007年，所以在笔者的项目中笔者对其进行了改进，思路依然与原文基本一致，只不过把文中基于XML的相关配置改为了我们项目中的基于 Java Code 的配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://tianshuang.me/tags/Java/"/>
    
      <category term="Spring" scheme="https://tianshuang.me/tags/Spring/"/>
    
      <category term="OLAP" scheme="https://tianshuang.me/tags/OLAP/"/>
    
  </entry>
  
  <entry>
    <title>Git notes</title>
    <link href="https://tianshuang.me/2016/07/Git-notes/index.html"/>
    <id>https://tianshuang.me/2016/07/Git-notes/index.html</id>
    <published>2016-07-07T02:03:20.000Z</published>
    <updated>2017-04-16T13:53:19.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git submodule init</div><div class="line">git submodule update</div></pre></td></tr></table></figure><p>Permanently authenticating with Git repositories can use the .netrc file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git commit -m <span class="string">"first commit"</span></div><div class="line">git remote add origin &lt;url&gt;</div></pre></td></tr></table></figure><p>Push a new local branch to a remote Git repository and track it too:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin &lt;branch&gt;</div></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div
    
    </summary>
    
    
      <category term="Git" scheme="https://tianshuang.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello, 2016!</title>
    <link href="https://tianshuang.me/2016/02/Hello-2016/index.html"/>
    <id>https://tianshuang.me/2016/02/Hello-2016/index.html</id>
    <published>2016-02-07T17:30:02.000Z</published>
    <updated>2017-04-02T14:11:07.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote class="blockquote-center">风险越高，收益越大</blockquote><p>新年，已经没了小时候的些许期待，年复一年。</p><p>回顾 2015 ，专业技能方面稳步增长，但感觉驱动自己向前的力量没以前那么强了，可能已经渐渐厌倦大学生活，破茧待出，心里渴望急需闯进外面的世界。春节前考过了科目三，2016 终于不会再在练车上消耗时间。白条和花呗不是好东西。</p><a id="more"></a><p>新的一年，首要的事就是对自己的技术栈查缺补漏，夯实基础，毕竟也就这个学期了，接下来就要面临校招了。玩手机时少花时间在 Twitter 和 Weibo 上，刷多了你会发现这国家真是没救了，但又改变不了什么。把时间迁移到阅读上，利用玩手机的时间多看看出版物书籍，这几年看过的纸质书都堆了好几摞了，不过大部分是技术书，但现在却在慢慢看一些人文方面的书籍，不能把自己完全困在技术圈子里，毕竟技术不是生活的全部。今年下半年应该会搬回自己的宿舍，大一住了一年宿舍，由于偶然的机会结识了核自院的老师，大二大三住在教学楼里，虽然和另外一位朋友一起，但依旧非常安静，特别是晚自习结束后，整座楼寂静无声，有空调有网并且从不断电，正是这个环境给了我自由学习探索的空间，没人打扰，可以自己决定工作到夜间什么时刻，在这里学习的效率也是非常高的，完成了自己知识体系从点到面的一些积累，在这个过程中就好像一扇扇门依次打开。</p><p>新年快乐，每个人都有自己的故事。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;风险越高，收益越大&lt;/blockquote&gt;&lt;p&gt;新年，已经没了小时候的些许期待，年复一年。&lt;/p&gt;&lt;p&gt;回顾 2015 ，专业技能方面稳步增长，但感觉驱动自己向前的力量没以前那么强了，可能已经渐渐厌倦大学生活，破茧待出，心里渴望急需闯进外面的世界。春节前考过了科目三，2016 终于不会再在练车上消耗时间。白条和花呗不是好东西。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于此博客</title>
    <link href="https://tianshuang.me/2016/01/%E5%85%B3%E4%BA%8E%E6%AD%A4%E5%8D%9A%E5%AE%A2/index.html"/>
    <id>https://tianshuang.me/2016/01/关于此博客/index.html</id>
    <published>2016-01-20T20:43:28.000Z</published>
    <updated>2017-08-05T02:57:09.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>折腾两三天，总算把这个博客搭建起来了。之前大二在 <a href="http://blog.csdn.net/u012552052" target="_blank" rel="external">CSDN</a> 写过一段时间的博客，大多数都是关于技术细节的，竟然有 138 篇？一直都有自己搭建博客的想法，想过自己动手码个博客，但无奈自己主要做 Java 的相关开发，前端不是很熟悉，无法做到心里想象中的前端效果，遂放弃自己动手码的想法。看到许多人用 Hexo ，于是 Google 了下相关资料，静态，再看看主题，也不错，遂决定就是 Hexo 了。接下来说说此博客搭建的相关技术吧。</p><a id="more"></a><ul><li><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a><ul><li>A fast, simple &amp; powerful blog framework.</li></ul></li><li><a href="https://m.do.co/c/5641c4b906cb" target="_blank" rel="external">DigitalOcean</a><ul><li>一是免备案，二是 GitHub 的学生认证送了 50 刀的 DigitalOcean 促销码。</li></ul></li><li><a href="https://www.namecheap.com/" target="_blank" rel="external">Namecheap</a><ul><li>GitHub 的学生认证赠送了一年的 .me 域名，果断就把 tianshuang.me 拿下。由于众所周知的原因，将 DNS 解析改为 <a href="https://www.dnspod.cn/" target="_blank" rel="external">DNSPod</a> 。</li></ul></li><li><a href="https://www.nginx.com/" target="_blank" rel="external">Nginx</a><ul><li>反向代理，并且之前项目中也用过，就顺手用上了。</li></ul></li><li><a href="https://www.gogetssl.com/" target="_blank" rel="external">GOGETSSL</a><ul><li>防止 HTTP 劫持吧。</li></ul></li></ul><p>嗯，暂时想到的就这些，以后想到再写吧。</p><h3 id="2017-02-20-更新日志"><a href="#2017-02-20-更新日志" class="headerlink" title="2017-02-20 更新日志"></a>2017-02-20 更新日志</h3><p>时隔一年，根据后台的访客数据，我发现访客中的大多数都会来看一看这一篇。今日状态不佳，望着外面氤氲的天空，上午写了一点点代码，想起这篇博客，于是来更新一下。</p><p>上面的部分是16年博客建立之初的环境，由于主机在境外，由于众所周知的原因，慢是一种常态，更严重的是有时根本无法连通，开始我只是把部分图片资源转移到了七牛上，再后面直接把这个域名直接加速，后来学生主机到期，就把静态博客移到了 Github Pages 上，但是怎么弄主机都在境外，只要一旦没击中缓存，就要从境外主机回源，速度不可直视。趁这几天有空，将 blog 挪一下窝，一切为了速度，首先将 DNS 解析更换为 <a href="https://www.cloudxns.net/" target="_blank" rel="external">CloudXNS</a> ，然后将 blog 文件放至阿里云 OSS ，写了个增量更新的脚本，还是一样的一键发布，再搭配阿里云的 CDN ，之所以选阿里云是因为之前用七牛的 CDN 时，七牛那边暂不支持 HTTP 到 HTTPS 的 301/302 重定向，七牛的技术给的答复也只是支持的时候会通知，腾讯云的 CDN 也暂时不支持，而阿里云这边是支持的，之所以一定要 HTTPS ，是因为实在受不了右下角经常被插入小广告。暂时就做以上的调整，先试试效果。</p><h3 id="2017-02-25-更新日志"><a href="#2017-02-25-更新日志" class="headerlink" title="2017-02-25 更新日志"></a>2017-02-25 更新日志</h3><p>将博客增量上传到 OSS 的 Python 脚本上传到了 Github 上，需要的朋友自取， <a href="https://github.com/tianshuang/aliyun-oss-sync" target="_blank" rel="external">aliyun-oss-sync</a> ，因为使用阿里云 CDN 加速 OSS 之后， OSS 中的文件变化后 CDN 会自动清空相应文件的 CDN 缓存，所以每次只要 UPDATE 到 OSS 即完成发布。</p><h3 id="2017-03-03-更新日志"><a href="#2017-03-03-更新日志" class="headerlink" title="2017-03-03 更新日志"></a>2017-03-03 更新日志</h3><p>因为用户直接在浏览器输入 tianshuang.me 的话，浏览器默认使用 HTTP 协议访问， server 端返回 301/302 让客户端重定向到 <a href="https://tianshuang.me/">https://tianshuang.me/</a> ，而在这一次请求及响应依然是明文传输的，所以仍然存在被中间人攻击的可能。为了尽可能降低这种可能性，我们希望配置 Strict-Transport-Security 这个 header ，这里有一篇文章讲得比较清楚，参见 <a href="http://insights.thoughtworkers.org/detailed-hsts/" target="_blank" rel="external">HSTS详解</a> ，而本站使用了阿里云的 CDN ， CDN 的控制面板里可以手动配置 HTTP header ，但阿里云仅开放了部分 header 供用户手动配置，故已经提交了工单，希望开放此 Strict-Transport-Security header 供用户手动配置。</p><h3 id="2017-05-10-更新日志"><a href="#2017-05-10-更新日志" class="headerlink" title="2017-05-10 更新日志"></a>2017-05-10 更新日志</h3><p>重新梳理了下相关缓存配置，调整了 CDN 缓存服务器的缓存策略，对部分资源添加了针对浏览器的缓存控制头，调试时发现阿里云 CDN 已经支持 HTTP2 了。</p><p><img src="https://storage.tianshuang.me/2017/05/aliyun-cdn-http2.png" alt="aliyun-cdn-http2"></p><h3 id="2017-08-05-更新日志"><a href="#2017-08-05-更新日志" class="headerlink" title="2017-08-05 更新日志"></a>2017-08-05 更新日志</h3><p>短短几个月，发生了很多事，好事坏事各占一半吧，今天有空把 <a href="https://github.com/tianshuang/aliyun-oss-sync" target="_blank" rel="external">aliyun-oss-sync</a> 改为了多线程上传，需要 Python 3.2 以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾两三天，总算把这个博客搭建起来了。之前大二在 &lt;a href=&quot;http://blog.csdn.net/u012552052&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSDN&lt;/a&gt; 写过一段时间的博客，大多数都是关于技术细节的，竟然有 138 篇？一直都有自己搭建博客的想法，想过自己动手码个博客，但无奈自己主要做 Java 的相关开发，前端不是很熟悉，无法做到心里想象中的前端效果，遂放弃自己动手码的想法。看到许多人用 Hexo ，于是 Google 了下相关资料，静态，再看看主题，也不错，遂决定就是 Hexo 了。接下来说说此博客搭建的相关技术吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://tianshuang.me/tags/Hexo/"/>
    
      <category term="Nginx" scheme="https://tianshuang.me/tags/Nginx/"/>
    
      <category term="SSL" scheme="https://tianshuang.me/tags/SSL/"/>
    
      <category term="CDN" scheme="https://tianshuang.me/tags/CDN/"/>
    
      <category term="HSTS" scheme="https://tianshuang.me/tags/HSTS/"/>
    
      <category term="OSS" scheme="https://tianshuang.me/tags/OSS/"/>
    
  </entry>
  
</feed>
